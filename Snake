import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.util.*;

public class Snake extends JPanel implements KeyListener {
    private static final int WIDTH = 20;
    private static final int HEIGHT = 20;
    private static final int DOT_SIZE = 20;
    private static final int DELAY = 150;

    private ArrayList<Point> snake;
    private Point food;
    private int score;
    private String direction;

    public Snake() {
        setPreferredSize(new Dimension(WIDTH * DOT_SIZE, HEIGHT * DOT_SIZE));
        setBackground(Color.black);
        setFocusable(true);
        addKeyListener(this);
        initGame();
    }

    private void initGame() {
        snake = new ArrayList<>();
        snake.add(new Point(10, 10));
        direction = "RIGHT";
        score = 0;
        spawnFood();
        new javax.swing.Timer(DELAY, e -> move()).start();
    }

    private void spawnFood() {
        food = new Point((int) (Math.random() * WIDTH), (int) (Math.random() * HEIGHT));
    }

    private void move() {
        Point head = new Point(snake.get(0));
        switch (direction) {
            case "UP":
                head.y--;
                break;
            case "DOWN":
                head.y++;
                break;
            case "LEFT":
                head.x--;
                break;
            case "RIGHT":
                head.x++;
                break;
        }

        if (head.x < 0) head.x = WIDTH - 1;  // Trecere la marginea din dreapta când atinge marginea din stânga
        if (head.x >= WIDTH) head.x = 0;      // Trecere la marginea din stânga când atinge marginea din dreapta
        if (head.y < 0) head.y = HEIGHT - 1;  // Trecere la marginea de jos când atinge marginea de sus
        if (head.y >= HEIGHT) head.y = 0;     // Trecere la marginea de sus când atinge marginea de jos

        if (head.equals(food)) {
            score++;
            spawnFood();
        } else {
            snake.remove(snake.size() - 1);
        }

        if (snake.contains(head)) {
            gameOver();
            return;
        }

        snake.add(0, head);
        repaint();
    }

    private void gameOver() {
        JOptionPane.showMessageDialog(this, "Game Over! Score: " + score);
        initGame();
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        g.setColor(Color.green);
        g.fillRect(food.x * DOT_SIZE, food.y * DOT_SIZE, DOT_SIZE, DOT_SIZE);

        g.setColor(Color.white);
        for (Point point : snake) {
            g.fillRect(point.x * DOT_SIZE, point.y * DOT_SIZE, DOT_SIZE, DOT_SIZE);
        }

        Toolkit.getDefaultToolkit().sync();
    }

    @Override
    public void keyPressed(KeyEvent e) {
        int key = e.getKeyCode();
        if ((key == KeyEvent.VK_LEFT) && (!direction.equals("RIGHT"))) {
            direction = "LEFT";
        }
        if ((key == KeyEvent.VK_RIGHT) && (!direction.equals("LEFT"))) {
            direction = "RIGHT";
        }
        if ((key == KeyEvent.VK_UP) && (!direction.equals("DOWN"))) {
            direction = "UP";
        }
        if ((key == KeyEvent.VK_DOWN) && (!direction.equals("UP"))) {
            direction = "DOWN";
        }
    }

    @Override
    public void keyTyped(KeyEvent e) {
    }

    @Override
    public void keyReleased(KeyEvent e) {
    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("Snake");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setResizable(false);
        frame.add(new Snake(), BorderLayout.CENTER);
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }
}
